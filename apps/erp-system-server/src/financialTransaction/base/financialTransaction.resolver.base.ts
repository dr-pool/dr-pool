/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FinancialTransaction } from "./FinancialTransaction";
import { FinancialTransactionCountArgs } from "./FinancialTransactionCountArgs";
import { FinancialTransactionFindManyArgs } from "./FinancialTransactionFindManyArgs";
import { FinancialTransactionFindUniqueArgs } from "./FinancialTransactionFindUniqueArgs";
import { DeleteFinancialTransactionArgs } from "./DeleteFinancialTransactionArgs";
import { FinancialTransactionService } from "../financialTransaction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FinancialTransaction)
export class FinancialTransactionResolverBase {
  constructor(
    protected readonly service: FinancialTransactionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FinancialTransaction",
    action: "read",
    possession: "any",
  })
  async _financialTransactionsMeta(
    @graphql.Args() args: FinancialTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FinancialTransaction])
  @nestAccessControl.UseRoles({
    resource: "FinancialTransaction",
    action: "read",
    possession: "any",
  })
  async financialTransactions(
    @graphql.Args() args: FinancialTransactionFindManyArgs
  ): Promise<FinancialTransaction[]> {
    return this.service.financialTransactions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FinancialTransaction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FinancialTransaction",
    action: "read",
    possession: "own",
  })
  async financialTransaction(
    @graphql.Args() args: FinancialTransactionFindUniqueArgs
  ): Promise<FinancialTransaction | null> {
    const result = await this.service.financialTransaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FinancialTransaction)
  @nestAccessControl.UseRoles({
    resource: "FinancialTransaction",
    action: "delete",
    possession: "any",
  })
  async deleteFinancialTransaction(
    @graphql.Args() args: DeleteFinancialTransactionArgs
  ): Promise<FinancialTransaction | null> {
    try {
      return await this.service.deleteFinancialTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
