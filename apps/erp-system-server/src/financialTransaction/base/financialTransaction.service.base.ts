/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FinancialTransaction as PrismaFinancialTransaction,
} from "@prisma/client";

export class FinancialTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FinancialTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.financialTransaction.count(args);
  }

  async financialTransactions(
    args: Prisma.FinancialTransactionFindManyArgs
  ): Promise<PrismaFinancialTransaction[]> {
    return this.prisma.financialTransaction.findMany(args);
  }
  async financialTransaction(
    args: Prisma.FinancialTransactionFindUniqueArgs
  ): Promise<PrismaFinancialTransaction | null> {
    return this.prisma.financialTransaction.findUnique(args);
  }
  async createFinancialTransaction(
    args: Prisma.FinancialTransactionCreateArgs
  ): Promise<PrismaFinancialTransaction> {
    return this.prisma.financialTransaction.create(args);
  }
  async updateFinancialTransaction(
    args: Prisma.FinancialTransactionUpdateArgs
  ): Promise<PrismaFinancialTransaction> {
    return this.prisma.financialTransaction.update(args);
  }
  async deleteFinancialTransaction(
    args: Prisma.FinancialTransactionDeleteArgs
  ): Promise<PrismaFinancialTransaction> {
    return this.prisma.financialTransaction.delete(args);
  }
}
